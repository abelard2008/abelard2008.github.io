#+STARTUP: showall indent
#+STARTUP: hidestars
#+OPTIONS:   H:2 num:nil toc:nil \n:nil ::t |:t  -:t f:t *:t <:t

#+OPTIONS:   tex:t  d:nil todo:t pri:nil tags:not-in-toc

#+BEGIN_HTML
---
layout: post
category: computer science and enginneering
title: "A part of Sahpado source"
description: ""
tags: [Rails, Shapado]
---
{% include JB/setup %}

#+END_HTML
#+TOC: headlines 2 
* Shapado uses Rack middleware

In Theme, it uses mongoid_ext/file_server.rb to finish middleware.

* Mongoid-ext

Add a type file_key, in Theme's filed stylesheet is a file_key. The file_key includes meta data: _id, name, content_type, and extension.

The number of meta data can be appended during initializaion: such as:
#+BEGIN_SRC ruby
    def self.generate_stylesheet(theme_id){
      theme.stylesheet = css
      theme.stylesheet["extension"] = "css"
      theme.stylesheet["content_type"] = "text/css"
      theme.stylesheet["content_type1"] = "text/css"  # append it freely
    }
#+END_SRC


Group.set_default_theme -> create_defaule -> Themes.generate_stylesheet

file_key define a dynamic method using Module#define_method()

#+BEGIN_SRC ruby
define_method("#{name}=") do |file| 
end
#+END_SRC

so if I define a field theme.stylesheet type file_key:
#+BEGIN_SRC ruby
theme.stylesheet = css
#+END_SRC

the above definition will be evaluated.

file_key's real type is StringIO or File, such as stylesheet is StrongIO, and bg_image is File

File < EmbeddedHash uses Magic ffn (https://github.com/qoobaa/magic)


There is a snippet code about Ruby's dynamic method, 
#+BEGIN_SRC ruby
module MyMod

  def self.included(target)
    target.send(:include, InstanceMethods)
    target.extend ClassMethods
    target.class_eval do
      file_list :xoxo
    end
  end

  module InstanceMethods
    def an_instance_method
    end
  end

  module ClassMethods
    def file_list(name)
      define_method(name) do
        puts "file_list called"
      end
    end
    
    def file_key(name)
      define_method(name) do
        puts "file_key called"
        send(:xoxo)
      end
    end
  end
end

class MyClass
  include MyMod
  file_key :stylesheet
end

puts MyClass.singleton_methods # => [:file_list, :file_key] 
MyClass.new.stylesheet
puts MyClass.instance_methods(false) # => [:xoxo, :stylesheet, :""] 

#+END_SRC
Specially, "send(:xoxo)" will call a method called "xoxo", the block defined in:

#+BEGIN_SRC ruby
define_method(name) do
   puts "file_list called"
end
#+END_SRC

So, output "file_list called". "xoxo" method is defined through "file_list :xoxo", called dynamic method. Also, "stylesheet" is like.
If using "ActiveSupport":
#+BEGIN_SRC ruby
require 'active_support'
module MyMod

  extend ActiveSupport::Concern

  included do
    file_list :xoxo
  end

  def an_instance_method
  end

  module ClassMethods
    
    def file_list(name)
      define_method(name) do
        puts "file_list called"
      end
    end
    
    def file_key(name)
      define_method(name) do
        puts "file_key called"
        send(:xoxo)
      end
    end
  end
end

class MyClass
  include MyMod

  file_key :stylesheet
end

puts MyClass.singleton_methods # => [:file_list, :file_key] 
MyClass.new.stylesheet
puts MyClass.instance_methods(false) # => [:xoxo, :stylesheet, :""] 

#+END_SRC

file_key is defined in "MongoidExt::Storage", which use the above method to specify the capability using "define_method("#{name=})", "define_method(name)" or "define_method("has_#{name}?")".

field is defined in mongoid/lib/fields.rb
